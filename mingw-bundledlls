#!/usr/bin/python3

# The MIT License (MIT)
#
# Copyright (c) 2015 Martin Preisler
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import subprocess
import os
import os.path
import win32api
import argparse
import shutil
import winreg
import re

# List of system dlls which do not need to be packaged with exe
blacklist = [
    "crypt32.dll", "d3d9.dll", "dnsapi.dll", "mpr.dll", "ntdll.dll",
    "iphlpapi.dll", "version.dll", "winmm.dll", "winspool.drv", "wsock32.dll"
]


def get_dll_search_order():
    search_order = []
    aReg = winreg.ConnectRegistry(None,winreg.HKEY_LOCAL_MACHINE)
    aKey = winreg.OpenKey(aReg, r"SYSTEM\CurrentControlSet\Control\Session Manager")
    try:
        safeDllMode,t = winreg.QueryValueEx(aKey, "SafeDllSearchMode")
    except FileNotFoundError:
        safeDllMode = 1
    winreg.CloseKey(aKey)
    winreg.CloseKey(aReg)

    if safeDllMode:
        search_order.append("")
        search_order.append(win32api.GetSystemDirectory())
        search_order.append(win32api.GetWindowsDirectory())
        search_order.append(".")
    else:
        search_order.append("")
        search_order.append(".")
        search_order.append(win32api.GetSystemDirectory())
        search_order.append(win32api.GetWindowsDirectory())

    search_order.extend(os.environ["PATH"].split(";"))

    return search_order


def expand_env_values(s):
    pat = re.compile("(%\w+%)")
    m = pat.match(s)
    while m:
        env_var = m.group(1)
        env_var_s = env_var[1:-1]
        try:
            env_val = os.environ[env_var_s]
        except KeyError:
            env_val = ""
        s = s.replace(env_var,env_val)
        m = pat.match(s)
    return s


def get_known_dlls():
    aReg = winreg.ConnectRegistry(None,winreg.HKEY_LOCAL_MACHINE)
    aKey = winreg.OpenKey(aReg, r"SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs")
    dlls = []
    done = False
    i = 0
    while not done:
        try:
            n,v,t = winreg.EnumValue(aKey,i)
            if "DllDirectory" not in n:
                v = expand_env_values(v)
                dlls.append(v.lower())
            i += 1
        except OSError:
            done = True
    winreg.CloseKey(aKey)
    winreg.CloseKey(aReg)
    return dlls


def find_full_path(filename, path_prefixes):
    path = None

    for path_prefix in path_prefixes:
        path_candidate = os.path.join(path_prefix, filename)

        if os.path.exists(path_candidate):
            path = path_candidate
            break

    if path is None:
        raise RuntimeError(
            "Can't find " + filename + ". If it is an inbuilt Windows DLL, "
            "please add it to the blacklist variable in the script and send "
            "a pull request!"
        )

    return path


def gather_deps(path, path_prefixes, known_dlls, seen):
    ret = [path]
    output = subprocess.check_output(["objdump", "-p", path]).decode('utf-8').split("\n")
    for line in output:
        ldep = None

        if line.startswith("\tDLL Name: "):
            dep = line.split("DLL Name: ")[1].strip()
            ldep = dep.lower()

        m = re.match(".+Forwarder RVA -- (\w+).", line)
        if m:
            dep = m.group(1) + ".dll"
            ldep = dep.lower()

        if ldep == None:
            continue

        if ldep in known_dlls:
            continue

        if ldep in seen:
            continue

        dep_path = find_full_path(dep, path_prefixes)
        seen.extend([ldep])
        subdeps = gather_deps(dep_path, path_prefixes, known_dlls, seen)
        ret.extend(subdeps)

    return ret


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "exe_file",
        help="EXE or DLL file that you need to bundle dependencies for"
    )
    parser.add_argument(
        "--copy",
        action="store_true",
        help="In addition to printing out the dependencies, also copy them next to the exe_file"
    )
    parser.add_argument(
        "--upx",
        action="store_true",
        help="Only valid if --copy is provided. Run UPX on all the DLLs and EXE."
    )
    args = parser.parse_args()

    if args.upx and not args.copy:
        raise RuntimeError("Can't run UPX if --copy hasn't been provided.")

    known_dlls = get_known_dlls()
    known_dlls.extend(blacklist)

    all_deps = set(gather_deps(args.exe_file, get_dll_search_order(), known_dlls, []))
    all_deps.remove(args.exe_file)

    print("\n".join(all_deps))

    if args.copy:
        print("Copying enabled, will now copy all dependencies next to the exe_file.\n")

        parent_dir = os.path.dirname(os.path.abspath(args.exe_file))

        for dep in all_deps:
            target = os.path.join(parent_dir, os.path.basename(dep))
            print("Copying '%s' to '%s'" % (dep, target))
            shutil.copy(dep, parent_dir)

            if args.upx:
                subprocess.call(["upx", target])


if __name__ == "__main__":
    main()
